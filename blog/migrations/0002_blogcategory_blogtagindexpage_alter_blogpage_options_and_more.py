# Generated by Django 4.2.8 on 2024-03-07 18:21

from django.db import migrations, models
import django.db.models.deletion
import modelcluster.contrib.taggit
import modelcluster.fields


class Migration(migrations.Migration):
    dependencies = [
        ("taggit", "0005_auto_20220424_2025"),
        ("wagtailcore", "0089_log_entry_data_json_null_to_object"),
        ("wagtailimages", "0025_alter_image_file_alter_rendition_file"),
        ("blog", "0001_initial"),
    ]

    operations = [
        migrations.CreateModel(
            name="BlogCategory",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=125)),
                (
                    "slug",
                    models.SlugField(
                        allow_unicode=True,
                        help_text="You can define a slug to identify posts by this category",
                        max_length=255,
                        verbose_name="Slug",
                    ),
                ),
            ],
            options={
                "verbose_name": "\u200cBlog Category",
                "verbose_name_plural": "Blog Categories",
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="BlogTagIndexPage",
            fields=[
                (
                    "page_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="wagtailcore.page",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
            bases=("wagtailcore.page",),
        ),
        migrations.AlterModelOptions(
            name="blogpage",
            options={"ordering": ["pub_date", "post_title"]},
        ),
        migrations.AddField(
            model_name="blogindexpage",
            name="hero_subtilte",
            field=models.CharField(default="Featured Stories", max_length=125),
        ),
        migrations.AddField(
            model_name="blogpage",
            name="main_header",
            field=models.CharField(
                default="Image Above Heading",
                help_text="Post Main Heading",
                max_length=250,
            ),
        ),
        migrations.AddField(
            model_name="blogpage",
            name="main_image",
            field=models.ForeignKey(
                default=None,
                on_delete=django.db.models.deletion.PROTECT,
                related_name="post_banner_image",
                to="wagtailimages.image",
            ),
        ),
        migrations.AddField(
            model_name="blogpage",
            name="post_title",
            field=models.CharField(
                default=None, help_text="Post Title", max_length=250
            ),
        ),
        migrations.AddField(
            model_name="blogpage",
            name="pub_date",
            field=models.DateTimeField(default=None, verbose_name="Publish date"),
        ),
        migrations.CreateModel(
            name="BlogTagPage",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "content_object",
                    modelcluster.fields.ParentalKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="tagged_items",
                        to="blog.blogpage",
                    ),
                ),
                (
                    "tag",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="%(app_label)s_%(class)s_items",
                        to="taggit.tag",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="BlogPageGalleryImage",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "sort_order",
                    models.IntegerField(blank=True, editable=False, null=True),
                ),
                (
                    "image_caption",
                    models.CharField(
                        blank=True, max_length=125, verbose_name="Caption"
                    ),
                ),
                (
                    "content_object",
                    modelcluster.fields.ParentalKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="blog_page_gallery",
                        to="blog.blogpage",
                    ),
                ),
                (
                    "inline_image",
                    models.ForeignKey(
                        help_text="Posts Inline Images",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="wagtailimages.image",
                    ),
                ),
            ],
            options={
                "ordering": ["sort_order"],
                "abstract": False,
            },
        ),
        migrations.AddField(
            model_name="blogpage",
            name="categories",
            field=modelcluster.fields.ParentalManyToManyField(
                blank=True, to="blog.blogcategory"
            ),
        ),
        migrations.AddField(
            model_name="blogpage",
            name="tags",
            field=modelcluster.contrib.taggit.ClusterTaggableManager(
                blank=True,
                help_text="A comma-separated list of tags.",
                through="blog.BlogTagPage",
                to="taggit.Tag",
                verbose_name="Tags",
            ),
        ),
    ]
